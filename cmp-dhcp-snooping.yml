---
# set ip dhcp snooping on 3560 switches
- hosts: cmp
  gather_facts: false
  connection: network_cli
  tasks:

    # gather ios_facts network_resources fails on:
    # WS-C3560-24PS      12.2(55)SE12          C3560-IPSERVICESK9-M
    # ME-3400-24TS-A     12.2(55)SE3           ME340x-METROIPACCESSK9-M
    #
    #ios_vlans fails on:
    # ME-3400-24TS-A     12.2(60)EZ8           ME340x-METROIPACCESSK9-M
    #
  - name: get ios facts minimal
    ios_facts:
      gather_subset: min

  - debug: 
      msg: 
        - "{{ansible_net_model}}"

  - fail:
      msg: "This is not a expected switch type"
    when: (  ansible_net_model is not regex("(?i)ME-3400") and ansible_net_model is not regex("3560") )

  - name: process on catalyst 3560 platform
    block:
    - name: get vlans
      ios_vlans:
        config:
        state: gathered
      register: vlans 

    - name: test json_query
      debug:
        msg: "{{vlans | json_query('gathered[*].vlan_id') | type_debug }}"
      when: False

    - name: extract vlans_id
      set_fact:
        vlans_snoop: "{{vlans | json_query('gathered[*].vlan_id') | select('lessthan', 200) }}"
      
        # we set dhcp snooping only on vlans with id below 200
    - name: set dhcp snooping on vlans
      ios_config:
        lines:
          - "ip dhcp snooping vlan {{item}}"
      loop: "{{ vlans_snoop }}"
      when:  item|int < 200  and false
    
    when: ansible_net_model is regex("3560")



  - name: process on ME-3400 platform
    block:
    - name: get vlans from ME-3400
      ios_command:
        commands: 
          - show vlan
      register: me3400vlans

    - debug: 
        msg:
          - "{{ansible_net_model}}"
          - "{{me3400vlans.stdout_lines[0][0]}}"
      when: False

            # we are interested in vlans range 1 - 200 only 
            # verify that we properly interpret stdout_lines
    - name: initialize vlans_snoop list
      set_fact:
        vlans_snoop: []

    - name: extract vlans_id's from ME-3400's 'show vlan'
      set_fact:
        vlans_snoop: "{{vlans_snoop|default([]) + [ item.split(' ')[0] | int ]  }}"
      loop: "{{me3400vlans.stdout_lines[0]}}"
      when: ( item is regex ("enet") and item.split(" ")[0]|int < 200 )

    when: ansible_net_model is regex("3400")
    

  - debug:
      msg: 
        - "Before vlan_parser"
        - "{{vlans_snoop}}"
    when: False

  - name: cisco vlan_parser
    set_fact:
      vlans_snoop: "{{vlans_snoop | ansible.netcommon.vlan_parser }}"
    # note: vlans_snoop is a list with one element now, a string containing vlans range

  # this sould work on every platform
  - name: set dhcp snooping 
    ios_config:
      lines:
        - no ip dhcp snooping information option
        - "ip dhcp snooping vlan {{vlans_snoop[0]}}"
        - ip dhcp snooping 

  - name: save config
    ios_config:
      save_when: always

    ############# some notes ##############################
    #
    # ios_vlans module breaks on ME-3400 platfrom with error: 
    #   ValueError: invalid literal for int() with base 10: 'Fa0/1,'

  ## proper dhcp snooping config also requires interface level command: "ip dhcp snooping trust" on the uplink interfaces, and sometimes interf facing other switches on the LAN
    # in this case it is already set manually 
    # uplink interfaces names and numbers vary per customer location
    # 
    # deal with instertion of dhcp option 82 and dhcp snooping
    # int level, connected to other switches on the LAN side: ip dhcp snooping information option allow-untrusted
    # global: no ip dhcp snooping information option
    # SVI/interf/subinterf with ip helper:  ip dhcp relay information trusted



      #######################################
      # sample output from ios_vlans gathered 
      #         {
      #            "changed": false,
      #            "failed": false,
      #            "gathered": [
      #                {
      #                    "mtu": 1500,
      #                    "name": "default",
      #                    "shutdown": "disabled",
      #                    "state": "active",
      #                    "vlan_id": 1
      #                },
      #       ... ommited
      #
            ## example output from "show vlan" on ME-3400:
            #VLAN Type  SAID       MTU   Parent RingNo BridgeNo Stp  BrdgMode Trans1 Trans2
            #---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------
            #1    enet  100001     1500  -      -      -        -    -        0      0 
            # ... ommited

      ############## sample output from notebook execution on ME-3400
      #        ok: [cmp-sw-bialoleka] => (item=130  enet  100130     1500  -      -      -        -    -        0      0   ) => {
    #            "ansible_loop_var": "item",
    #            "item": "130  enet  100130     1500  -      -      -        -    -        0      0   ",
    #            "item.split(\" \")[0]": "130"
    #        }

